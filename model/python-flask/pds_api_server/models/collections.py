# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pds_api_server.models.base_model_ import Model
from pds_api_server.models.collection import Collection  # noqa: F401,E501
from pds_api_server import util


class Collections(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, metadata: object=None, data: List[Collection]=None):  # noqa: E501
        """Collections - a model defined in Swagger

        :param metadata: The metadata of this Collections.  # noqa: E501
        :type metadata: object
        :param data: The data of this Collections.  # noqa: E501
        :type data: List[Collection]
        """
        self.swagger_types = {
            'metadata': object,
            'data': List[Collection]
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'data': 'data'
        }
        self._metadata = metadata
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'Collections':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The collections of this Collections.  # noqa: E501
        :rtype: Collections
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self) -> object:
        """Gets the metadata of this Collections.


        :return: The metadata of this Collections.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this Collections.


        :param metadata: The metadata of this Collections.
        :type metadata: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def data(self) -> List[Collection]:
        """Gets the data of this Collections.


        :return: The data of this Collections.
        :rtype: List[Collection]
        """
        return self._data

    @data.setter
    def data(self, data: List[Collection]):
        """Sets the data of this Collections.


        :param data: The data of this Collections.
        :type data: List[Collection]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data
